version: '3.8'

services:

  clickhouse:
    image: yandex/clickhouse-server
    restart: always
    environment: 
      CLICKHOUSE_DB: ${DB_CH_DATABASE_NAME}
      CLICKHOUSE_USER: ${DB_CH_USER}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${DB_CH_PASSWORD}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - clickhosue_vol:/var/lib/clickhouse
    ports:
      - "${DB_CH_PORT}:8123"
      - "9000:9000"
    networks: 
      - royanegar

  # migrator:
  #   image: curl
  #   restart: never
  #   depends_on:
  #     clickhouse:
  #       condition: service_healthy
  #   entrypoint: "sh /migrations.sh"
  #   volumes:
  #     - type: bind
  #       source: ./migrations.sh
  #       target: /migrations.sh
  #   networks:
  #     - royanegar

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DB_PG_DATABASE_NAME}
      POSTGRES_USER: ${DB_PG_USER}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD}
    volumes:
    - postgres_vol:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_PG_DATABASE_NAME}", "-U", "${DB_PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "${DB_PG_PORT}:5432"
    networks: 
      - royanegar

  zookeeper:
    image: confluentinc/cp-zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - royanegar

  broker:
    image: confluentinc/cp-server
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - royanegar

  # haproxy:
  #   image: 'haproxy'
  #   restart: always
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     FD_SETSIZE: 10
  #   volumes:
  #     - type: bind
  #       source: ./haproxy.cfg
  #       target: /usr/local/etc/haproxy/haproxy.cfg
  #   networks:
  #     - royanegar

  # event_collector_service_1:
  #   hostname: event_collector_service_1
  #   container_name: event_collector_service_1
  #   build: ./services/event_collector_service/
  #   depends_on:
  #     clickhouse:
  #       condition: service_healthy
  #   networks:
  #     - royanegar

  # event_collector_service_2:
  #   hostname: event_collector_service_2
  #   container_name: event_collector_service_2
  #   build: ./services/event_collector_service/
  #   depends_on:
  #     clickhouse:
  #       condition: service_healthy
  #   networks:
  #     - royanegar

  # event_collector_service_3:
  #   hostname: event_collector_service_3
  #   container_name: event_collector_service_3
  #   build: ./services/event_collector_service/
  #   depends_on:
  #     clickhouse:
  #       condition: service_healthy
  #   networks:
  #     - royanegar


  # app:
  #   image: sajadrahimi/backend-assignement
  #   restart: always
  #   depends_on:
  #     - event_collector_service_1
  #   extra_hosts:
  #       - "host.docker.internal:host-gateway"
  


volumes:
  clickhosue_vol:
  postgres_vol:
  
networks:
  royanegar: