version: '3.8'

services:

  clickhouse:
    image: yandex/clickhouse-server
    restart: always
    environment: 
      CLICKHOUSE_DB: ${DB_CH_DATABASE_NAME}
      CLICKHOUSE_USER: ${DB_CH_USER}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${DB_CH_PASSWORD}
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - clickhosue_vol:/var/lib/clickhouse
    ports:
      - "${DB_CH_PORT}:8123"
    networks: 
      - royanegar

  # migrator:
  #   image: curl
  #   restart: never
  #   depends_on:
  #     clickhouse:
  #       condition: service_healthy
  #   entrypoint: "sh /migrations.sh"
  #   volumes:
  #     - type: bind
  #       source: ./migrations.sh
  #       target: /migrations.sh
  #   networks:
  #     - royanegar

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${DB_PG_DATABASE_NAME}
      POSTGRES_USER: ${DB_PG_USER}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD}
    volumes:
    - postgres_vol:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_PG_DATABASE_NAME}", "-U", "${DB_PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "${DB_PG_PORT}:5432"
    networks: 
      - royanegar

  # kafka:
  #   image: 'bitnami/kafka:latest'
  #   environment:
  #     - KAFKA_CFG_NODE_ID=0
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #   healthcheck:
  #     test: /kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3

  haproxy:
    image: 'haproxy'
    restart: always
    ports:
      - "8000:8000"
    environment:
      FD_SETSIZE: 10
    volumes:
      - type: bind
        source: ./haproxy.cfg
        target: /usr/local/etc/haproxy/haproxy.cfg
    networks:
      - royanegar

  event_collector_service_1:
    hostname: event_collector_service_1
    container_name: event_collector_service_1
    build: ./services/event_collector_service/
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - royanegar

  event_collector_service_2:
    hostname: event_collector_service_2
    container_name: event_collector_service_2
    build: ./services/event_collector_service/
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - royanegar

  event_collector_service_3:
    hostname: event_collector_service_3
    container_name: event_collector_service_3
    build: ./services/event_collector_service/
    depends_on:
      clickhouse:
        condition: service_healthy
    networks:
      - royanegar


  app:
    image: sajadrahimi/backend-assignement
    restart: always
    depends_on:
      - event_collector_service_1
    extra_hosts:
        - "host.docker.internal:host-gateway"
  


volumes:
  clickhosue_vol:
  postgres_vol:
  
networks:
  royanegar: